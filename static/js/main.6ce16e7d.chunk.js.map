{"version":3,"sources":["components/noteForm.tsx","constants/notes.ts","components/note.tsx","App.tsx","constants/general.ts","index.tsx"],"names":["NoteForm","props","useState","noteText","setNoteText","Form","className","Col","FormGroup","Label","for","Input","type","name","id","onChange","event","target","value","handleChange","Button","color","onClick","preventDefault","today","Date","toDateString","currentNotes","storageNotes","localStorage","getItem","JSON","parse","newNotes","date","setItem","stringify","shouldUpdate","showdown","require","ReactMarkdown","Note","isInEditMode","setIsInEditMode","converter","Converter","Card","CardBody","CardTitle","noteKey","CardSubtitle","noteDate","makeHtml","handleSave","splice","handleDelete","App","update","setUpdate","useEffect","map","note","key","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6ce16e7d.chunk.js","sourcesContent":["// React\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\n// React Bootstrap\nimport { Form, FormGroup, Label, Input, Button, Col } from 'reactstrap';\n\n// CSS\nimport './noteForm.scss';\n\n// Constants\nimport { createNote, addNote } from '../constants/notes';\n\nconst NoteForm = (props: any) => {\n  const [noteText, setNoteText] = useState('');\n\n  const addNoteToStorage = (event: { preventDefault: () => void }) => {\n    event.preventDefault();\n\n    const today = new Date().toDateString();\n\n    let currentNotes = [];\n    const storageNotes: string | null = localStorage.getItem('notes');\n    if (storageNotes) {\n      currentNotes = JSON.parse(storageNotes);\n    }\n\n    const newNotes = [\n      ...currentNotes,\n      {\n        noteText: noteText,\n        date: today,\n      },\n    ];\n\n    localStorage.setItem('notes', JSON.stringify(newNotes));\n    props.shouldUpdate();\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setNoteText(event.target.value);\n  };\n\n  return (\n    <div>\n      <Form className=\"add-note-form\">\n        <Col>\n          <FormGroup>\n            <Label className=\"add-note-form__label\" for=\"addNoteText\">\n              {createNote}\n            </Label>\n            <Input\n              className=\"add-note-form__textarea\"\n              type=\"textarea\"\n              name=\"text\"\n              id=\"addNoteText\"\n              onChange={(event) => {\n                handleChange(event);\n              }}\n            />\n          </FormGroup>\n        </Col>\n        <Col>\n          <FormGroup>\n            <Button color=\"primary\" onClick={addNoteToStorage}>\n              {addNote}\n            </Button>\n          </FormGroup>\n        </Col>\n      </Form>\n    </div>\n  );\n};\n\nNoteForm.propTypes = {\n  shouldUpdate: PropTypes.func.isRequired,\n};\n\nexport default NoteForm;\n","// Constants regarding Notes.\nexport const createNote = 'Create a Note';\nexport const addNote = 'Add Note';\nexport const editNote = 'Edit Note';\nexport const saveNote = 'Save Note';\nexport const deleteNote = 'Delete Note';\n\nexport const noteTitle = 'Note ';\nexport const noteSubtitle = 'Made/Edited On: ';\n","// React\nimport React, { useState } from 'react';\n\nimport PropTypes from 'prop-types';\n\n// React Bootstrap\nimport {\n  Card,\n  CardBody,\n  CardTitle,\n  Button,\n  Input,\n  CardSubtitle,\n} from 'reactstrap';\n\n// CSS\nimport './note.scss';\n\n// Constants\nimport {\n  saveNote,\n  editNote,\n  deleteNote,\n  noteTitle,\n  noteSubtitle,\n} from '../constants/notes';\n\n// Markdown Converter\nconst showdown = require('showdown');\n\n// React Markdown\nconst ReactMarkdown = require('react-markdown');\n\nconst Note = (props: any) => {\n  const [noteText, setNoteText] = useState('');\n  const [isInEditMode, setIsInEditMode] = useState(false);\n\n  const converter = new showdown.Converter();\n\n  const handleEdit = () => {\n    setIsInEditMode(true);\n  };\n\n  const handleSave = (\n    event: React.MouseEvent<any, MouseEvent>,\n    noteKey: number,\n  ) => {\n    event.preventDefault();\n\n    let currentNotes = [];\n    const storageNotes: string | null = localStorage.getItem('notes');\n    if (storageNotes) {\n      currentNotes = JSON.parse(storageNotes);\n    }\n\n    const today = new Date().toDateString();\n\n    currentNotes[noteKey] = {\n      noteText: converter.makeHtml(noteText),\n      date: today,\n    };\n\n    localStorage.setItem('notes', JSON.stringify(currentNotes));\n\n    setIsInEditMode(false);\n    props.shouldUpdate();\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setNoteText(event.target.value);\n  };\n\n  const handleDelete = (noteKey: number) => {\n    let currentNotes = [];\n    const storageNotes: string | null = localStorage.getItem('notes');\n    if (storageNotes) {\n      currentNotes = JSON.parse(storageNotes);\n    }\n    currentNotes.splice(noteKey, 1);\n    localStorage.setItem('notes', JSON.stringify(currentNotes));\n    props.shouldUpdate();\n  };\n\n  return (\n    <Card className=\"card-note\">\n      <CardBody>\n        <CardTitle className=\"card-note__title\">\n          {noteTitle} {props.noteKey + 1}\n        </CardTitle>\n        <CardSubtitle className=\"card-note__subtitle\">\n          {noteSubtitle} {props.noteDate}\n        </CardSubtitle>\n        {isInEditMode ? (\n          <>\n            <Input\n              className=\"card-note__textarea\"\n              type=\"textarea\"\n              name=\"text\"\n              id=\"addNoteText\"\n              onChange={(event) => {\n                handleChange(event);\n              }}\n            />\n            <Button\n              className=\"card-note__button\"\n              onClick={(event) => {\n                handleSave(event, props.noteKey);\n              }}\n            >\n              {saveNote}\n            </Button>\n          </>\n        ) : (\n          <>\n            <ReactMarkdown>{props.noteText}</ReactMarkdown>\n            <Button\n              className=\"card-note__button-left\"\n              onClick={() => {\n                handleEdit();\n              }}\n            >\n              {editNote}\n            </Button>\n            <Button\n              className=\"card-note__button-right\"\n              onClick={() => {\n                handleDelete(props.noteKey);\n              }}\n            >\n              {deleteNote}\n            </Button>\n          </>\n        )}\n      </CardBody>\n    </Card>\n  );\n};\n\nNote.propTypes = {\n  noteKey: PropTypes.number.isRequired,\n  noteText: PropTypes.string.isRequired,\n  noteDate: PropTypes.string.isRequired,\n  shouldUpdate: PropTypes.func.isRequired,\n};\n\nexport default Note;\n","// React\nimport React, { useState, useEffect } from 'react';\n\n// CSS\nimport './App.scss';\n\n// Constants\nimport { headerText } from './constants/general';\n\nimport NoteForm from './components/noteForm';\nimport Note from './components/note';\n\nconst App = () => {\n  const [update, setUpdate] = useState(false);\n\n  let currentNotes = [];\n  const storageNotes: string | null = localStorage.getItem('notes');\n  if (storageNotes) {\n    currentNotes = JSON.parse(storageNotes);\n  }\n\n  useEffect(() => {}, [update]);\n\n  const shouldUpdate = () => {\n    setUpdate(!update);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"header-text\">\n        <p>{headerText}</p>\n      </header>\n      <NoteForm shouldUpdate={shouldUpdate} />\n      <div className=\"note\">\n        {currentNotes.map(\n          (note: { noteText: string; date: string }, key: number) => {\n            return (\n              <Note\n                key={key}\n                noteKey={key}\n                noteText={note.noteText}\n                noteDate={note.date}\n                shouldUpdate={shouldUpdate}\n              />\n            );\n          },\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// General constants\nexport const headerText = 'The place to create, edit and delete Notes.';\n","// React\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n// React Bootstrap\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}